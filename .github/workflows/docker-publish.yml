name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use GitHub Container Registry
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: tyamahori/laravelorbstack

jobs:
  # Build individual architecture images on their native hardware
  build:
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      prod_digest: ${{ steps.build-and-push-prod.outputs.digest }}
      frankenphp_digest: ${{ steps.build-and-push-frankenphp.outputs.digest }}
      flyio_digest: ${{ steps.build-and-push-flyio.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # We're only using the labels from this action, not the tags

      # Build and push the production image for this architecture
      - name: Build and push production image (${{ matrix.arch }})
        id: build-and-push-prod
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: prod
          platforms: linux/${{ matrix.arch }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push the FrankenPHP image for Fly.io for this architecture
      - name: Build and push FrankenPHP image (${{ matrix.arch }})
        id: build-and-push-frankenphp
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: frankenphpflyio
          platforms: linux/${{ matrix.arch }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:frankenphp-${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push the Apache image for Fly.io for this architecture
      - name: Build and push Fly.io Apache image (${{ matrix.arch }})
        id: build-and-push-flyio
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: flyio
          platforms: linux/${{ matrix.arch }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:flyio-${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create multi-architecture manifests
  manifest:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to GitHub Container Registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up Docker Buildx for manifest creation
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Create and push production manifest
      - name: Create and push production manifest
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod
            ${{ github.event_name == 'push' && github.ref_type == 'tag' && format('{0}/{1}:{2}-prod', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || '' }}
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('{0}/{1}:latest-prod', env.REGISTRY, env.IMAGE_NAME) || '' }}
          labels: ${{ steps.meta.outputs.labels }}

      # Create and push FrankenPHP manifest
      - name: Create and push FrankenPHP manifest
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: frankenphpflyio
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:frankenphp
            ${{ github.event_name == 'push' && github.ref_type == 'tag' && format('{0}/{1}:{2}-frankenphp', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || '' }}
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('{0}/{1}:latest-frankenphp', env.REGISTRY, env.IMAGE_NAME) || '' }}
          labels: ${{ steps.meta.outputs.labels }}

      # Create and push Fly.io Apache manifest
      - name: Create and push Fly.io Apache manifest
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/php.Dockerfile
          target: flyio
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:flyio
            ${{ github.event_name == 'push' && github.ref_type == 'tag' && format('{0}/{1}:{2}-flyio', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || '' }}
            ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('{0}/{1}:latest-flyio', env.REGISTRY, env.IMAGE_NAME) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
